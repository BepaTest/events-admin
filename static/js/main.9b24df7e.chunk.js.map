{"version":3,"sources":["events.js","CustomLoginPage.js","FIREBASE_CONFIG.js","App.js","registerServiceWorker.js","index.js"],"names":["uuidv4","require","EventTitle","_ref","record","react","concat","name","EventFilter","props","Filter","TextInput","label","source","alwaysOn","EventList","List","Object","assign","filters","events_EventFilter","Datagrid","TextField","DateField","ShowButton","EditButton","DeleteButton","redirect","undoable","EventShow","Show","title","events_EventTitle","SimpleShowLayout","ReferenceField","reference","multiline","RichTextField","ImageField","EventCreate","Create","SimpleForm","disabled","defaultValue","validate","required","ReferenceInput","SelectInput","optionText","DateInput","LongTextInput","esm","toolbar","ImageInput","accept","placeholder","EventEdit","Edit","CustomLoginForm","react_default","a","createElement","LoginForm","CustomLoginPage","Login","backgroundImage","loginForm","CustomLoginPage_CustomLoginForm","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","options","logging","app","firebase","initializeApp","dataProvider","FirebaseDataProvider","authProvider","FirebaseAuthProvider","firebaseRealtime","FirebaseRealTimeSaga","i18nProvider","frenchMessages","App","Admin","loginPage","customSagas","locale","Resource","list","show","create","edit","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"maA8BMA,EAASC,EAAQ,KAEjBC,EAAa,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACpB,OAAOC,EAAA,0CAAiBD,EAAM,IAAAE,OAAOF,EAAOG,KAAd,KAAwB,KAGlDC,EAAc,SAACC,GAAD,OAClBJ,EAAA,cAACK,EAAA,EAAWD,EACVJ,EAAA,cAACM,EAAA,EAAD,CAAWC,MAAM,SAASC,OAAO,OAAOC,UAAQ,MAIvCC,EAAY,SAACN,GAAD,OACvBJ,EAAA,cAACW,EAAA,EAADC,OAAAC,OAAA,GAAUT,EAAV,CAAiBU,QAASd,EAAA,cAACe,EAAD,QACxBf,EAAA,cAACgB,EAAA,EAAD,KACEhB,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,OAAOD,MAAM,0BAC/BP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,aAClBR,EAAA,cAACkB,EAAA,EAAD,CAAWV,OAAO,YAAYD,MAAM,2BACpCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,YAAYD,MAAM,mBACpCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,UAAUD,MAAM,iBAClCP,EAAA,cAACmB,EAAA,EAAD,CAAYZ,MAAM,KAClBP,EAAA,cAACoB,EAAA,EAAD,CAAYb,MAAM,KAClBP,EAAA,cAACqB,EAAA,EAAD,CAAcd,MAAM,GAAGe,UAAU,EAAOC,UAAU,OAK3CC,EAAY,SAACpB,GAAD,OACvBJ,EAAA,cAACyB,EAAA,EAADb,OAAAC,OAAA,CAAMa,MAAO1B,EAAA,cAAC2B,EAAD,OAAoBvB,GAC/BJ,EAAA,cAAC4B,EAAA,EAAD,KACE5B,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,OAAOD,MAAM,0BAC/BP,EAAA,cAAC6B,EAAA,EAAD,CACErB,OAAO,WACPsB,UAAU,aACVvB,MAAM,gBAENP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,UAEpBR,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,YAAYD,MAAM,2BACpCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,YAAYD,MAAM,2BACpCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,UAAUD,MAAM,yBAClCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,aAAaD,MAAM,uBACrCP,EAAA,cAACiB,EAAA,EAAD,CAAWc,WAAS,EAACvB,OAAO,cAAcD,MAAM,gBAChDP,EAAA,cAACgC,EAAA,EAAD,CAAexB,OAAO,OAAOD,MAAM,oBACnCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,QAAQD,MAAM,SAChCP,EAAA,cAACiC,EAAA,EAAD,CACEzB,OAAO,YACPD,MAAM,0BACNmB,MAAM,4BAER1B,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,iBAAiBD,MAAM,6BACzCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,mBAAmBD,MAAM,0BAC3CP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,eAAeD,MAAM,8BACvCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,eAAeD,MAAM,qBACvCP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,kBAAkBD,MAAM,kBAC1CP,EAAA,cAACiB,EAAA,EAAD,CAAWT,OAAO,gBAAgBD,MAAM,2CAKjC2B,EAAc,SAAC9B,GAAD,OACzBJ,EAAA,cAACmC,EAAA,EAADvB,OAAAC,OAAA,CAAQa,MAAM,iCAA2BtB,GACvCJ,EAAA,cAACoC,EAAA,EAAD,CAAYd,SAAS,QACnBtB,EAAA,cAACM,EAAA,EAAD,CAAW+B,UAAQ,EAAC7B,OAAO,KAAK8B,aAAc,kBAAM3C,OACpDK,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,OAAOD,MAAM,wBAAkBgC,SAAUC,gBAC3DxC,EAAA,cAACyC,EAAA,EAAD,CACEjC,OAAO,WACPsB,UAAU,aACVvB,MAAM,gBAENP,EAAA,cAAC0C,EAAA,EAAD,CAAaC,WAAW,UAE1B3C,EAAA,cAAC4C,EAAA,EAAD,CACEpC,OAAO,YACPD,MAAM,yBACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,YACPD,MAAM,yBACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,UACPD,MAAM,uBACNgC,SAAUC,gBAEZxC,EAAA,cAAC6C,EAAA,EAAD,CAAerC,OAAO,cAAcD,MAAM,gBAC1CP,EAAA,cAAC8C,EAAA,EAAD,CACEtC,OAAO,OACPD,MAAM,kBACNwC,QAAS,CAAC,CAAC,OAAQ,SAAU,YAAa,WAE5C/C,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,QAAQD,MAAM,OAAOgC,SAAUC,gBACjDxC,EAAA,cAACgD,EAAA,EAAD,CACExC,OAAO,QACPD,MAAM,QACN0C,OAAO,UACPV,SAAUC,cACVU,YAAalD,EAAA,sDAEbA,EAAA,cAACiC,EAAA,EAAD,CAAYzB,OAAO,MAAMkB,MAAM,WAEjC1B,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,iBAAiBD,MAAM,6BACzCP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,mBAAmBD,MAAM,2BAC3CP,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,eACPD,MAAM,4BACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,eAAeD,MAAM,qBACvCP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,kBAAkBD,MAAM,kBAC1CP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,gBAAgBD,MAAM,2CAKjC4C,EAAY,SAAC/C,GAAD,OACvBJ,EAAA,cAACoD,EAAA,EAADxC,OAAAC,OAAA,CAAMa,MAAO1B,EAAA,cAAC2B,EAAD,OAAoBvB,GAC/BJ,EAAA,cAACoC,EAAA,EAAD,KACEpC,EAAA,cAACM,EAAA,EAAD,CAAW+B,UAAQ,EAAC7B,OAAO,KAAK8B,aAAc,kBAAM3C,OACpDK,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,OAAOD,MAAM,wBAAkBgC,SAAUC,gBAC3DxC,EAAA,cAACyC,EAAA,EAAD,CACEjC,OAAO,WACPsB,UAAU,aACVvB,MAAM,gBAENP,EAAA,cAAC0C,EAAA,EAAD,CAAaC,WAAW,UAE1B3C,EAAA,cAAC4C,EAAA,EAAD,CACEpC,OAAO,YACPD,MAAM,yBACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,YACPD,MAAM,yBACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,UACPD,MAAM,uBACNgC,SAAUC,gBAEZxC,EAAA,cAAC6C,EAAA,EAAD,CAAerC,OAAO,cAAcD,MAAM,gBAC1CP,EAAA,cAAC8C,EAAA,EAAD,CACEtC,OAAO,OACPD,MAAM,kBACNwC,QAAS,CAAC,CAAC,OAAQ,SAAU,YAAa,WAE5C/C,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,QAAQD,MAAM,OAAOgC,SAAUC,gBACjDxC,EAAA,cAACgD,EAAA,EAAD,CACExC,OAAO,QACPD,MAAM,QACN0C,OAAO,UACPV,SAAUC,cACVU,YAAalD,EAAA,sDAEbA,EAAA,cAACiC,EAAA,EAAD,CAAYzB,OAAO,MAAMkB,MAAM,WAEjC1B,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,iBAAiBD,MAAM,6BACzCP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,mBAAmBD,MAAM,0BAC3CP,EAAA,cAACM,EAAA,EAAD,CACEE,OAAO,eACPD,MAAM,4BACNgC,SAAUC,gBAEZxC,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,eAAeD,MAAM,qBACvCP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,kBAAkBD,MAAM,kBAC1CP,EAAA,cAACM,EAAA,EAAD,CAAWE,OAAO,gBAAgBD,MAAM,8GCnMxC8C,EAAkB,SAACjD,GAAD,OACtBkD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAcrD,KAYJsD,EARS,SAACtD,GAAD,OACtBkD,EAAAC,EAAAC,cAACG,EAAA,EAAD/C,OAAAC,OAAA,CACE+C,gBAAgB,+EAChBC,UAAWP,EAAAC,EAAAC,cAACM,EAAD,OACP1D,uBCdK2D,GAAiB,CAC5BC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,gBCSfC,GAAU,CACdC,SAAS,EACTC,IAJkBC,IAASC,cAAcX,KAQrCY,GAAeC,+BAAqBb,GAAgBO,IACpDO,GAAeC,+BAAqBf,GAAgBO,IACpDS,GAAmBC,+BAAqBL,GAAcL,IAEtDW,GAAe,kBAAMC,KA0BZC,oLAtBX,OACEnF,EAAA,cAACoF,EAAA,EAAD,CACEC,UAAW3B,EACX4B,YAAa,CAACP,IACdJ,aAAcA,GACdE,aAAcA,GACdU,OAAO,KACPN,aAAcA,IAEdjF,EAAA,cAACwF,EAAA,EAAD,CAAUtF,KAAK,eACfF,EAAA,cAACwF,EAAA,EAAD,CACEtF,KAAK,aACLuF,KAAM/E,EACNgF,KAAMlE,EACNmE,OAAQzD,EACR0D,KAAMzC,YAjBE0C,aCjBZC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC1EjEC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,GAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,gBAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAApG,OAAM0H,gBAAN,sBAEP7B,IAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,GAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,GAAgBC,MC1CxBmC","file":"static/js/main.9b24df7e.chunk.js","sourcesContent":["// in src/posts.js\nimport * as React from \"react\";\n// tslint:disable-next-line:no-var-requires\nimport {\n  Datagrid,\n  List,\n  Show,\n  Create,\n  Edit,\n  Filter,\n  SimpleShowLayout,\n  SimpleForm,\n  ReferenceInput,\n  TextField,\n  TextInput,\n  ShowButton,\n  EditButton,\n  DeleteButton,\n  RichTextField,\n  SelectInput,\n  DateInput,\n  ReferenceField,\n  ImageInput,\n  ImageField,\n  DateField,\n  LongTextInput,\n  required,\n} from \"react-admin\";\nimport RichTextInput from \"ra-input-rich-text\";\n\nconst uuidv4 = require(\"uuid/v4\");\n\nconst EventTitle = ({ record }) => {\n  return <span>Evénement {record ? `\"${record.name}\"` : \"\"}</span>;\n};\n\nconst EventFilter = (props) => (\n  <Filter {...props}>\n    <TextInput label=\"Search\" source=\"name\" alwaysOn />\n  </Filter>\n);\n\nexport const EventList = (props) => (\n  <List {...props} filters={<EventFilter />}>\n    <Datagrid>\n      <TextField source=\"name\" label=\"Nom d'événement\" />\n      <TextField source=\"category\" />\n      <DateField source=\"eventDate\" label=\"Date d'événement\" />\n      <TextField source=\"startTime\" label=\"Heure de debut\" />\n      <TextField source=\"endTime\" label=\"Heure de fin\" />\n      <ShowButton label=\"\" />\n      <EditButton label=\"\" />\n      <DeleteButton label=\"\" redirect={false} undoable={false} />\n    </Datagrid>\n  </List>\n);\n\nexport const EventShow = (props) => (\n  <Show title={<EventTitle />} {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" label=\"Nom d'événement\" />\n      <ReferenceField\n        source=\"category\"\n        reference=\"categories\"\n        label=\"Catégorie\"\n      >\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <TextField source=\"eventDate\" label=\"Date d'événement\" />\n      <TextField source=\"startTime\" label=\"Heure de debut (HH:MM)\" />\n      <TextField source=\"endTime\" label=\"Heure de fin (HH:MM)\" />\n      <TextField source=\"lastupdate\" label=\"Dernier changement\" />\n      <TextField multiline source=\"description\" label=\"Description\" />\n      <RichTextField source=\"link\" label=\"Lien associé\" />\n      <TextField source=\"price\" label=\"Prix\" />\n      <ImageField\n        source=\"image.src\"\n        label=\"Image d'événement\"\n        title=\"Image d'événement\"\n      />\n      <TextField source=\"address.street\" label=\"Adresse d'événemet\" />\n      <TextField source=\"address.postCode\" label=\"Adresse - code postal\" />\n      <TextField source=\"address.city\" label=\"Adresse - nom de la ville\" />\n      <TextField source=\"contact.name\" label=\"Contact - Prenom\" />\n      <TextField source=\"contact.surname\" label=\"Contact - Nom\" />\n      <TextField source=\"contact.phone\" label=\"Contact - Numero de téléphone\" />\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const EventCreate = (props) => (\n  <Create title=\"Création d'événement\" {...props}>\n    <SimpleForm redirect=\"list\">\n      <TextInput disabled source=\"id\" defaultValue={() => uuidv4()} />\n      <TextInput source=\"name\" label=\"Nom d'événement\" validate={required()} />\n      <ReferenceInput\n        source=\"category\"\n        reference=\"categories\"\n        label=\"Catégorie\"\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <DateInput\n        source=\"eventDate\"\n        label=\"Date d'événement\"\n        validate={required()}\n      />\n      <TextInput\n        source=\"startTime\"\n        label=\"Heure de debut (HH:MM)\"\n        validate={required()}\n      />\n      <TextInput\n        source=\"endTime\"\n        label=\"Heure de fin (HH:MM)\"\n        validate={required()}\n      />\n      <LongTextInput source=\"description\" label=\"Description\" />\n      <RichTextInput\n        source=\"link\"\n        label=\"Lien associé\"\n        toolbar={[[\"bold\", \"italic\", \"underline\", \"link\"]]}\n      />\n      <TextInput source=\"price\" label=\"Prix\" validate={required()} />\n      <ImageInput\n        source=\"image\"\n        label=\"Photo\"\n        accept=\"image/*\"\n        validate={required()}\n        placeholder={<p>Déposez votre photo ici</p>}\n      >\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <TextInput source=\"address.street\" label=\"Adresse d'événemet\" />\n      <TextInput source=\"address.postCode\" label=\"Adresse  - code postal\" />\n      <TextInput\n        source=\"address.city\"\n        label=\"Adresse - nom de la ville\"\n        validate={required()}\n      />\n      <TextInput source=\"contact.name\" label=\"Contact - Prenom\" />\n      <TextInput source=\"contact.surname\" label=\"Contact - Nom\" />\n      <TextInput source=\"contact.phone\" label=\"Contact - Numero de téléphone\" />\n    </SimpleForm>\n  </Create>\n);\n\nexport const EventEdit = (props) => (\n  <Edit title={<EventTitle />} {...props}>\n    <SimpleForm>\n      <TextInput disabled source=\"id\" defaultValue={() => uuidv4()} />\n      <TextInput source=\"name\" label=\"Nom d'événement\" validate={required()} />\n      <ReferenceInput\n        source=\"category\"\n        reference=\"categories\"\n        label=\"Catégorie\"\n      >\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <DateInput\n        source=\"eventDate\"\n        label=\"Date d'événement\"\n        validate={required()}\n      />\n      <TextInput\n        source=\"startTime\"\n        label=\"Heure de debut (HH:MM)\"\n        validate={required()}\n      />\n      <TextInput\n        source=\"endTime\"\n        label=\"Heure de fin (HH:MM)\"\n        validate={required()}\n      />\n      <LongTextInput source=\"description\" label=\"Description\" />\n      <RichTextInput\n        source=\"link\"\n        label=\"Lien associé\"\n        toolbar={[[\"bold\", \"italic\", \"underline\", \"link\"]]}\n      />\n      <TextInput source=\"price\" label=\"Prix\" validate={required()} />\n      <ImageInput\n        source=\"image\"\n        label=\"Photo\"\n        accept=\"image/*\"\n        validate={required()}\n        placeholder={<p>Déposez votre photo ici</p>}\n      >\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <TextInput source=\"address.street\" label=\"Adresse d'événemet\" />\n      <TextInput source=\"address.postCode\" label=\"Adresse - code postal\" />\n      <TextInput\n        source=\"address.city\"\n        label=\"Adresse - nom de la ville\"\n        validate={required()}\n      />\n      <TextInput source=\"contact.name\" label=\"Contact - Prenom\" />\n      <TextInput source=\"contact.surname\" label=\"Contact - Nom\" />\n      <TextInput source=\"contact.phone\" label=\"Contact - Numero de téléphone\" />\n    </SimpleForm>\n  </Edit>\n);\n","// LoginPage.js\nimport React from \"react\";\nimport { Login, LoginForm } from \"react-admin\";\n\nconst CustomLoginForm = (props) => (\n  <div>\n    <LoginForm {...props} />\n  </div>\n);\n\nconst CustomLoginPage = (props) => (\n  <Login\n    backgroundImage=\"https://www.parlezmoidimmo.fr/public/files/images/ou-vivre-dans-le-rhone.jpg\"\n    loginForm={<CustomLoginForm />}\n    {...props}\n  />\n);\n\nexport default CustomLoginPage;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyAQM6ktPaKMmwMsheXguHdTURKg4nzwWeU\",\n  authDomain: \"communeevents-581a9.firebaseapp.com\",\n  databaseURL: \"https://communeevents-581a9.firebaseio.com\",\n  projectId: \"communeevents-581a9\",\n  storageBucket: \"communeevents-581a9.appspot.com\",\n  messagingSenderId: \"679013840468\",\n};\n","import * as React from \"react\";\nimport { EventList, EventShow, EventCreate, EventEdit } from \"./events\";\nimport { Admin, Resource } from \"react-admin\";\nimport {\n  FirebaseRealTimeSaga,\n  FirebaseDataProvider,\n  FirebaseAuthProvider,\n} from \"react-admin-firebase\";\nimport firebase from \"firebase\";\nimport CustomLoginPage from \"./CustomLoginPage\";\nimport frenchMessages from \"ra-language-french\";\nimport { firebaseConfig } from \"./FIREBASE_CONFIG\";\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst options = {\n  logging: true,\n  app: firebaseApp,\n  // rootRef: 'root_collection/some_document',\n};\n\nconst dataProvider = FirebaseDataProvider(firebaseConfig, options);\nconst authProvider = FirebaseAuthProvider(firebaseConfig, options);\nconst firebaseRealtime = FirebaseRealTimeSaga(dataProvider, options);\n\nconst i18nProvider = () => frenchMessages;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Admin\n        loginPage={CustomLoginPage}\n        customSagas={[firebaseRealtime]}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        locale=\"fr\"\n        i18nProvider={i18nProvider}\n      >\n        <Resource name=\"categories\" />\n        <Resource\n          name=\"evenements\"\n          list={EventList}\n          show={EventShow}\n          create={EventCreate}\n          edit={EventEdit}\n        />\n      </Admin>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}